@startuml

participant SomeService
participant RequestStatistic
participant Response
participant ResponseHandler
participant TimingResponseHandler
participant Request
participant RequestDispatcher
participant ExecutorServiceRepository
participant HawaiiThreadPoolExecutor

control Thread_1
participant FutureRequest
participant CallableRequest

control Thread_2
participant AsyncFutureRequest
participant AsyncCallableRequest


create HawaiiThreadPoolExecutor
ExecutorServiceRepository -> HawaiiThreadPoolExecutor : <b>new</b>

...
SomeService -> Request : executeAsync( )

activate Request #ddd
    Request --> Request : setup( )
    activate Request #fc9
        create RequestStatistic
        Request -> RequestStatistic : <b>new</b>
        Request -> RequestStatistic : startRequest( )
        |||
        create Response
        Request -> Response : <b>new</b>
    deactivate Request

    Request -> RequestDispatcher : executeAsync( this )
    activate RequestDispatcher #ddd
        create AsyncFutureRequest
        RequestDispatcher -> AsyncFutureRequest : <b>new( request, this )</b>
        activate AsyncFutureRequest #ddd
            create AsyncCallableRequest
            AsyncFutureRequest -> AsyncCallableRequest : <b>new( request, dispatcher )</b>
            AsyncFutureRequest -[#grey]-> RequestDispatcher : asyncTask
        deactivate AsyncFutureRequest

        RequestDispatcher -> ExecutorServiceRepository : getServiceMonitor( request )
        activate ExecutorServiceRepository #ddd
            ExecutorServiceRepository -> RequestDispatcher : executor
        deactivate ExecutorServiceRepository

        RequestDispatcher -> HawaiiThreadPoolExecutor : execute( asyncTask )
        activate HawaiiThreadPoolExecutor #ddd
         create Thread_2
         HawaiiThreadPoolExecutor -> Thread_2 : run( asyncTask )
         activate Thread_2 #eee
         HawaiiThreadPoolExecutor -> RequestDispatcher
        deactivate HawaiiThreadPoolExecutor

        RequestDispatcher -> Request : getResponse( )
        activate Request #fc9
            Request -> RequestDispatcher : response
        deactivate Request
        RequestDispatcher -> Request : response
    deactivate RequestDispatcher

    Request -> SomeService : response
deactivate Request

SomeService -> Response : get( )
activate Response #fc9
    Response -> Response : awaitDone( )
    activate Response #ffc

Thread_2 -> AsyncFutureRequest : run( )
activate AsyncFutureRequest #ddd
    AsyncFutureRequest -> AsyncCallableRequest : call( )
deactivate AsyncFutureRequest

activate AsyncCallableRequest #ddd
AsyncCallableRequest -> RequestDispatcher : execute( request )
    activate RequestDispatcher #ddd
        RequestDispatcher -> Request : getContext()
        activate Request #fc9
            Request -> RequestDispatcher : context
        deactivate Request
        |||

        RequestDispatcher -> Request : getResponse()
        activate Request #fc9
            Request -> RequestDispatcher : response
        deactivate Request

        |||

        RequestDispatcher -> ExecutorServiceRepository : getService( request )
        activate ExecutorServiceRepository #ddd

            ExecutorServiceRepository -> RequestDispatcher : executor
        deactivate ExecutorServiceRepository

        RequestDispatcher -> HawaiiThreadPoolExecutor : getQueueStatistics
        activate HawaiiThreadPoolExecutor #ddd
            HawaiiThreadPoolExecutor -> RequestDispatcher : queueStatistics
        deactivate HawaiiThreadPoolExecutor

        RequestDispatcher -> Request : getRequestStatistics
        activate Request #fc9
            Request -> RequestDispatcher : statistics
        deactivate Request
        RequestDispatcher -> RequestStatistic : setQueueStatistics( queueStatistics )

        |||
        RequestDispatcher -> RequestDispatcher : notifyListeners( request, executor )
        activate RequestDispatcher #ffc
        |||
        deactivate RequestDispatcher

        |||

        create FutureRequest
        RequestDispatcher -> FutureRequest : <b>new( request, response )</b>
        activate FutureRequest #ddd
            create CallableRequest
            FutureRequest -> CallableRequest : <b>new( request, response )</b>
            FutureRequest -[#grey]-> RequestDispatcher : task
        deactivate FutureRequest


        RequestDispatcher -> HawaiiThreadPoolExecutor : execute( task )

        activate HawaiiThreadPoolExecutor #ddd
            create Thread_1
            HawaiiThreadPoolExecutor -> Thread_1 : run( task )
            activate Thread_1 #eee
            HawaiiThreadPoolExecutor -> RequestDispatcher
        deactivate HawaiiThreadPoolExecutor

        Thread_1 -> FutureRequest : run( )
        activate FutureRequest #ddd
            FutureRequest -> CallableRequest : call( )
        deactivate FutureRequest

        activate CallableRequest #ddd

        RequestDispatcher -> Request : getTimeOut()
        activate Request #fc9
            Request -> RequestDispatcher : timeOut
        deactivate Request

        RequestDispatcher -> FutureRequest : get( timeOut )
        activate FutureRequest #fc9
        FutureRequest -> FutureRequest : awaitDone( )
        activate FutureRequest #ffc

        CallableRequest -> Request : doExecute()
        activate Request #fc9
            Request -> RequestStatistic : startBackendRequest( )


           Request -> Request : executeInternally( responseHandler )

            activate Request #ffc
                Request -[#blue]> SomeSystem : do_some_call( )

                |||
                ... some what later ...
                |||

                SomeSystem -[#blue]> Request : <F>

                create TimingResponseHandler
                Request -> TimingResponseHandler : <b>new( ... )</b>


                Request -> TimingResponseHandler : addToResponse( <F>, response )
                activate TimingResponseHandler #ddd
                    TimingResponseHandler -> RequestStatistic : startConversion()
                    TimingResponseHandler -> ResponseHandler : addToResponse( <F>, response )
                    activate ResponseHandler #ddd
                        ResponseHandler -> ResponseHandler : transform( <F> )

                        activate ResponseHandler #fc9
                            ResponseHandler -> ResponseHandler : <T>
                        deactivate ResponseHandler

                        ResponseHandler -> Response : set( <T> )

                        ResponseHandler --> TimingResponseHandler
                    deactivate ResponseHandler
                    TimingResponseHandler -> RequestStatistic : endConversion()
                    TimingResponseHandler --> Request
                deactivate TimingResponseHandler
                destroy TimingResponseHandler
            deactivate Request


            Request -> RequestStatistic : endBackendRequest( )

            Request -> CallableRequest
        deactivate Request


        CallableRequest -> Request : doCallback()
        activate Request #fc9
            Request -> RequestStatistic : startCallBack()
            |||
            Request -> RequestStatistic : endCallBack()
            Request -> CallableRequest
        deactivate Request


        CallableRequest -> FutureRequest  : response
        deactivate CallableRequest
        destroy CallableRequest

        activate FutureRequest #ddd
            FutureRequest --> FutureRequest : signalDone( )
            FutureRequest --> Thread_1
            destroy Thread_1
        deactivate FutureRequest
            |||
        deactivate FutureRequest

        FutureRequest -> RequestDispatcher : response

        deactivate FutureRequest
        destroy FutureRequest

        RequestDispatcher -> Request : finish( )
        activate Request #fc9
            Request -> RequestStatistic : endRequest( )

            Request -> Response : signalDone( )
            Response -> SomeService : T
            deactivate Response
            deactivate Response

            Request -> Request : logResponse( )

            Request --> RequestDispatcher
        deactivate Request

        RequestDispatcher -> AsyncCallableRequest : response

    deactivate RequestDispatcher
deactivate Request
AsyncCallableRequest -> AsyncFutureRequest : response
activate AsyncFutureRequest #ddd

deactivate AsyncCallableRequest
destroy AsyncCallableRequest
    AsyncFutureRequest -> AsyncFutureRequest : signalDone( )
    AsyncFutureRequest --> Thread_2
    destroy Thread_2
deactivate AsyncFutureRequest
destroy AsyncFutureRequest
@enduml